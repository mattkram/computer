<svg xmlns="http://www.w3.org/2000/svg" viewBox="-50 -50 300 500">

  <style>
  .circuit {
      fill: none;
      stroke: black;
      stroke-width: 3px;
  }
  .circuit-node {
      r: 8; // radius
      stroke: none;
      fill-opacity: 1;
      fill: black;
      cursor: move;
  }

  .node-label {
      font-family: "Arial";
      font-size: 10px;
      text-anchor: middle;
  }
  </style>

  <!-- The path that connects the nodes -->
  <path id="circuitPath" d="M 0,0 L 100,0 L 100,100 L 0,100 Z" class="circuit"/>

  <!-- Draggable corner nodes -->
  <circle class="circuit-node" cx="0" cy="0" id="circuit-node-0"/>
  <circle class="circuit-node" cx="100" cy="0" id="circuit-node-1"/>
  <circle class="circuit-node" cx="100" cy="100" id="circuit-node-2"/>
  <circle class="circuit-node" cx="0" cy="100" id="circuit-node-3"/>

  <!-- Coordinate display for each node -->
  <text class="node-label" x="0" y="-10">(0,0)</text>
  <text class="node-label" x="100" y="-10">(100,0)</text>
  <text class="node-label" x="100" y="115">(100,100)</text>
  <text class="node-label" x="0" y="115">(0,100)</text>

  <script type="text/javascript"><![CDATA[
    // Get all nodes and the path
    const nodes = [...document.getElementsByClassName('circuit-node')];
    const nodeLabels = [...document.getElementsByClassName('node-label')];
    const path = document.getElementById('circuitPath');

    // Variables to track the currently dragged element
    let selectedNode = null;
    let offset = { x: 0, y: 0 };
    let CTM = null;

    // Make nodes draggable
    nodes.forEach((node, index) => {
      // Mouse down event
      node.addEventListener('mousedown', (evt) => {
        evt.preventDefault();

        // Store the selected node globally
        selectedNode = { element: node, index: index };
        CTM = node.ownerSVGElement.getScreenCTM();

        // Calculate offset
        offset.x = (evt.clientX - CTM.e) / CTM.a - parseFloat(node.getAttribute('cx'));
        offset.y = (evt.clientY - CTM.f) / CTM.d - parseFloat(node.getAttribute('cy'));
      });
    });

    // Mouse move event (for dragging)
    document.addEventListener('mousemove', (evt) => {
      if (selectedNode) {
        evt.preventDefault();

        // Calculate new position
        const x = (evt.clientX - CTM.e) / CTM.a - offset.x;
        const y = (evt.clientY - CTM.f) / CTM.d - offset.y;

        // Update node position
        selectedNode.element.setAttribute('cx', x);
        selectedNode.element.setAttribute('cy', y);

        // Update coordinate text
        nodeLabels[selectedNode.index].setAttribute('x', x);
        nodeLabels[selectedNode.index].setAttribute('y', y > 50 ? y + 15 : y - 10);
        nodeLabels[selectedNode.index].textContent = `(${Math.round(x)},${Math.round(y)})`;

        // Update the path
        updatePath();
      }
    });

    // Mouse up event (for releasing)
    document.addEventListener('mouseup', () => {
      if (selectedNode) {
        selectedNode = null;
      }
    });

    // Update the path to connect all nodes
    function updatePath() {
      const pathData = nodes.map((node, index) => {
        const x = parseFloat(node.getAttribute('cx'));
        const y = parseFloat(node.getAttribute('cy'));
        return (index === 0 ? 'M ' : 'L ') + x + ',' + y;
      }).join(' ') + ' Z';

      path.setAttribute('d', pathData);
    }
  ]]></script>

  <style>
    /* Base styles */
    .wire {
      stroke: #333;
      stroke-width: 3;
      stroke-linecap: round;
    }

    .terminal {
      fill: #555;
      stroke: #333;
      stroke-width: 1;
    }

    .switch-lever {
      stroke: #444;
      stroke-width: 3;
      stroke-linecap: round;
      fill: none;
      transition: transform 0.3s ease-in-out;
      transform-origin: 0px 200px;
    }

    .pivot-point {
      fill: #666;
      stroke: #333;
      stroke-width: 1;
    }

    /* Open switch position */
    .switch.open .switch-lever {
      transform: rotate(-30deg);
    }

    /* Closed switch position */
    .switch.closed .switch-lever {
      transform: rotate(0deg);
    }

    /* Status text */
    .status-text {
      font-family: Arial, sans-serif;
      font-size: 12px;
      font-weight: bold;
      text-anchor: left;
      dominant-baseline: middle;
      transition: opacity 0.3s ease;
    }

    .open-text {
      fill: #cc0000;
      opacity: 0;
    }

    .closed-text {
      fill: #009900;
      opacity: 0;
    }

    .switch.open .open-text {
      opacity: 1;
    }

    .switch.closed .closed-text {
      opacity: 1;
    }

    .lightbulb {
      fill: #cccccc;
      stroke: black;
      stroke-width: 1;
      r: 10px;
      transition: background-color 0.3s ease;
    }

    .lightbulb.on {
      fill: #ffeb3b;
      box-shadow: 0 0 20px rgba(255, 235, 59, 0.7);
    }

  </style>

  <!-- Circuit container with initial class -->
  <g class="switch closed" id="switch-0">
    <!-- Left wire -->
    <line class="wire" x1="-30" y1="200" x2="0" y2="200" />

    <!-- Right wire -->
    <line class="wire" x1="100" y1="200" x2="160" y2="200" />

    <!-- Switch lever -->
    <line class="switch-lever" x1="0" y1="200" x2="100" y2="200" />

    <!-- Pivot point and terminal -->
    <circle class="pivot-point" cx="0" cy="200" r="5" />
    <rect class="terminal" x="95" y="195" width="10" height="10" />

    <!-- Lightbulb -->
    <circle id="lightbulb-0" class="lightbulb" cx="135" cy="200" />

    <!-- Status text -->
    <text class="status-text open-text" x="175" y="200">OPEN</text>
    <text class="status-text closed-text" x="175" y="200">CLOSED</text>
  </g>

  <g class="switch closed" id="switch-1">
    <!-- Left wire -->
    <line class="wire" x1="-30" y1="225" x2="0" y2="225" />

    <!-- Right wire -->
    <line class="wire" x1="100" y1="225" x2="160" y2="225" />

    <!-- Switch lever -->
    <line class="switch-lever" x1="0" y1="225" x2="100" y2="225" />

    <!-- Pivot point and terminal -->
    <circle class="pivot-point" cx="0" cy="225" r="5" />
    <rect class="terminal" x="95" y="220" width="10" height="10" />

    <!-- Lightbulb -->
    <circle id="lightbulb-1" class="lightbulb" cx="135" cy="225" />

    <!-- Status text -->
    <text class="status-text open-text" x="175" y="225">OPEN</text>
    <text class="status-text closed-text" x="175" y="225">CLOSED</text>
  </g>
</svg>
